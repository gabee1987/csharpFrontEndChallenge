// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WeatherNET;
//
//    var weatherData = WeatherData.FromJson(jsonString);
namespace WeatherNET.PirateWeatherApi
{
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WeatherData
    {
        [JsonProperty( "latitude" )]
        public double Latitude { get; set; }

        [JsonProperty( "longitude" )]
        public double Longitude { get; set; }

        [JsonProperty( "timezone" )]
        public string Timezone { get; set; }

        [JsonProperty( "offset" )]
        public long Offset { get; set; }

        [JsonProperty( "elevation" )]
        public long Elevation { get; set; }

        [JsonProperty( "currently" )]
        public Currently Currently { get; set; }

        [JsonProperty( "minutely" )]
        public Minutely Minutely { get; set; }

        [JsonProperty( "hourly" )]
        public Hourly Hourly { get; set; }

        [JsonProperty( "daily" )]
        public Daily Daily { get; set; }

        [JsonProperty( "flags" )]
        public Flags Flags { get; set; }
    }

    public partial class Currently
    {
        [JsonProperty( "time" )]
        public long Time { get; set; }

        [JsonProperty( "summary" )]
        //public Summary Summary { get; set; }
        public string Summary { get; set; }

        [JsonProperty( "icon" )]
        public Icon Icon { get; set; }

        [JsonProperty( "nearestStormDistance", NullValueHandling = NullValueHandling.Ignore )]
        public long? NearestStormDistance { get; set; }

        [JsonProperty( "nearestStormBearing", NullValueHandling = NullValueHandling.Ignore )]
        public long? NearestStormBearing { get; set; }

        [JsonProperty( "precipIntensity" )]
        public long PrecipIntensity { get; set; }

        [JsonProperty( "precipProbability" )]
        public long PrecipProbability { get; set; }

        [JsonProperty( "precipIntensityError" )]
        public long PrecipIntensityError { get; set; }

        [JsonProperty( "precipType" )]
        public PrecipType PrecipType { get; set; }

        [JsonProperty( "temperature" )]
        public double Temperature { get; set; }

        [JsonProperty( "apparentTemperature" )]
        public double ApparentTemperature { get; set; }

        [JsonProperty( "dewPoint" )]
        public double DewPoint { get; set; }

        [JsonProperty( "humidity" )]
        public double Humidity { get; set; }

        [JsonProperty( "pressure" )]
        public double Pressure { get; set; }

        [JsonProperty( "windSpeed" )]
        public double WindSpeed { get; set; }

        [JsonProperty( "windGust" )]
        public double WindGust { get; set; }

        [JsonProperty( "windBearing" )]
        public long WindBearing { get; set; }

        [JsonProperty( "cloudCover" )]
        public double CloudCover { get; set; }

        [JsonProperty( "uvIndex" )]
        public double UvIndex { get; set; }

        [JsonProperty( "visibility" )]
        public long Visibility { get; set; }

        [JsonProperty( "ozone" )]
        public double Ozone { get; set; }

        [JsonProperty( "precipAccumulation", NullValueHandling = NullValueHandling.Ignore )]
        public long? PrecipAccumulation { get; set; }
    }

    public partial class Daily
    {
        [JsonProperty( "summary" )]
        //public Summary Summary { get; set; }
        public string Summary { get; set; }

        [JsonProperty( "icon" )]
        public Icon Icon { get; set; }

        [JsonProperty( "data" )]
        public PerDayData[] Data { get; set; }
    }

    public partial class PerDayData
    {
        [JsonProperty( "time" )]
        public long Time { get; set; }

        [JsonProperty( "icon" )]
        public Icon Icon { get; set; }

        [JsonProperty( "summary" )]
        //public Summary Summary { get; set; }
        public string Summary { get; set; }

        [JsonProperty( "sunriseTime" )]
        public long SunriseTime { get; set; }

        [JsonProperty( "sunsetTime" )]
        public long SunsetTime { get; set; }

        [JsonProperty( "moonPhase" )]
        public double MoonPhase { get; set; }

        [JsonProperty( "precipIntensity" )]
        public long PrecipIntensity { get; set; }

        [JsonProperty( "precipIntensityMax" )]
        public long PrecipIntensityMax { get; set; }

        [JsonProperty( "precipIntensityMaxTime" )]
        public long PrecipIntensityMaxTime { get; set; }

        [JsonProperty( "precipProbability" )]
        public long PrecipProbability { get; set; }

        [JsonProperty( "precipAccumulation" )]
        public long PrecipAccumulation { get; set; }

        [JsonProperty( "precipType" )]
        public PrecipType PrecipType { get; set; }

        [JsonProperty( "temperatureHigh" )]
        public double TemperatureHigh { get; set; }

        [JsonProperty( "temperatureHighTime" )]
        public long TemperatureHighTime { get; set; }

        [JsonProperty( "temperatureLow" )]
        public double TemperatureLow { get; set; }

        [JsonProperty( "temperatureLowTime" )]
        public long TemperatureLowTime { get; set; }

        [JsonProperty( "apparentTemperatureHigh" )]
        public double ApparentTemperatureHigh { get; set; }

        [JsonProperty( "apparentTemperatureHighTime" )]
        public long ApparentTemperatureHighTime { get; set; }

        [JsonProperty( "apparentTemperatureLow" )]
        public double ApparentTemperatureLow { get; set; }

        [JsonProperty( "apparentTemperatureLowTime" )]
        public long ApparentTemperatureLowTime { get; set; }

        [JsonProperty( "dewPoint" )]
        public double DewPoint { get; set; }

        [JsonProperty( "humidity" )]
        public double Humidity { get; set; }

        [JsonProperty( "pressure" )]
        public double Pressure { get; set; }

        [JsonProperty( "windSpeed" )]
        public double WindSpeed { get; set; }

        [JsonProperty( "windGust" )]
        public double WindGust { get; set; }

        [JsonProperty( "windGustTime" )]
        public long WindGustTime { get; set; }

        [JsonProperty( "windBearing" )]
        public long WindBearing { get; set; }

        [JsonProperty( "cloudCover" )]
        public double CloudCover { get; set; }

        [JsonProperty( "uvIndex" )]
        public double UvIndex { get; set; }

        [JsonProperty( "uvIndexTime" )]
        public long UvIndexTime { get; set; }

        [JsonProperty( "visibility" )]
        public long Visibility { get; set; }

        [JsonProperty( "temperatureMin" )]
        public double TemperatureMin { get; set; }

        [JsonProperty( "temperatureMinTime" )]
        public long TemperatureMinTime { get; set; }

        [JsonProperty( "temperatureMax" )]
        public double TemperatureMax { get; set; }

        [JsonProperty( "temperatureMaxTime" )]
        public long TemperatureMaxTime { get; set; }

        [JsonProperty( "apparentTemperatureMin" )]
        public double ApparentTemperatureMin { get; set; }

        [JsonProperty( "apparentTemperatureMinTime" )]
        public long ApparentTemperatureMinTime { get; set; }

        [JsonProperty( "apparentTemperatureMax" )]
        public double ApparentTemperatureMax { get; set; }

        [JsonProperty( "apparentTemperatureMaxTime" )]
        public long ApparentTemperatureMaxTime { get; set; }
    }

    public partial class Flags
    {
        [JsonProperty( "sources" )]
        public string[] Sources { get; set; }

        [JsonProperty( "sourceTimes" )]
        public SourceTimes SourceTimes { get; set; }

        [JsonProperty( "nearest-station" )]
        public long NearestStation { get; set; }

        [JsonProperty( "units" )]
        public string Units { get; set; }

        [JsonProperty( "version" )]
        public string Version { get; set; }
    }

    public partial class SourceTimes
    {
        [JsonProperty( "gfs" )]
        public DateTimeOffset Gfs { get; set; }

        [JsonProperty( "gefs" )]
        public DateTimeOffset Gefs { get; set; }
    }

    public partial class Hourly
    {
        [JsonProperty( "summary" )]
        //public Summary Summary { get; set; }
        public string Summary { get; set; }

        [JsonProperty( "icon" )]
        public Icon Icon { get; set; }

        [JsonProperty( "data" )]
        public Currently[] Data { get; set; }
    }

    public partial class Minutely
    {
        [JsonProperty( "summary" )]
        //public Summary Summary { get; set; }
        public string Summary { get; set; }

        [JsonProperty( "icon" )]
        public string Icon { get; set; }

        [JsonProperty( "data" )]
        public PerMinuteData[] Data { get; set; }
    }

    public partial class PerMinuteData
    {
        [JsonProperty( "time" )]
        public long Time { get; set; }

        [JsonProperty( "precipIntensity" )]
        public long PrecipIntensity { get; set; }

        [JsonProperty( "precipProbability" )]
        public long PrecipProbability { get; set; }

        [JsonProperty( "precipIntensityError" )]
        public long PrecipIntensityError { get; set; }

        [JsonProperty( "precipType" )]
        public PrecipType PrecipType { get; set; }
    }

    public enum Icon { ClearDay, ClearNight, Rain, Snow, Sleet, Wind, Fog, Cloudy, PartlyCloudyDay, PartlyCloudyNight };

    public enum PrecipType { Rain, Snow, Sleet, None };

    //public enum Summary { Clear, Cloudy, PartlyCloudy };

    public partial class WeatherData
    {
        public static WeatherData FromJson( string json ) => JsonConvert.DeserializeObject<WeatherData>( json, WeatherNET.PirateWeatherApi.Converter.Settings );
    }

    public static class Serialize
    {
        public static string ToJson( this WeatherData self ) => JsonConvert.SerializeObject( self, WeatherNET.PirateWeatherApi.Converter.Settings );
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling        = DateParseHandling.None,
            Converters               =
            {
                IconConverter.Singleton,
                PrecipTypeConverter.Singleton,
                //SummaryConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class IconConverter : JsonConverter
    {
        public override bool CanConvert( Type t ) => t == typeof( Icon ) || t == typeof( Icon? );

        public override object ReadJson( JsonReader reader, Type t, object existingValue, JsonSerializer serializer )
        {
            if ( reader.TokenType == JsonToken.Null ) return null;
            var value = serializer.Deserialize<string>( reader );
            switch ( value )
            {
                case "clear-day":
                    return Icon.ClearDay;
                case "clear-night":
                    return Icon.ClearNight;
                case "rain":
                    return Icon.Rain;
                case "snow":
                    return Icon.Snow;
                case "sleet":
                    return Icon.Sleet;
                case "wind":
                    return Icon.Wind;
                case "fog":
                    return Icon.Fog;
                case "cloudy":
                    return Icon.Cloudy;
                case "partly-cloudy-day":
                    return Icon.PartlyCloudyDay;
                case "partly-cloudy-night":
                    return Icon.PartlyCloudyNight;
            }
            throw new Exception( "Cannot unmarshal type Icon" );
        }

        public override void WriteJson( JsonWriter writer, object untypedValue, JsonSerializer serializer )
        {
            if ( untypedValue == null )
            {
                serializer.Serialize( writer, null );
                return;
            }
            var value = (Icon)untypedValue;
            switch ( value )
            {
                case Icon.ClearDay:
                    serializer.Serialize( writer, "clear-day" );
                    return;
                case Icon.ClearNight:
                    serializer.Serialize( writer, "clear-night" );
                    return;
                case Icon.Rain:
                    serializer.Serialize( writer, "rain" );
                    return;
                case Icon.Snow:
                    serializer.Serialize( writer, "snow" );
                    return;
                case Icon.Sleet:
                    serializer.Serialize( writer, "sleet" );
                    return;
                case Icon.Wind:
                    serializer.Serialize( writer, "wind" );
                    return;
                case Icon.Fog:
                    serializer.Serialize( writer, "fog" );
                    return;
                case Icon.Cloudy:
                    serializer.Serialize( writer, "cloudy" );
                    return;
                case Icon.PartlyCloudyDay:
                    serializer.Serialize( writer, "partly-cloudy-day" );
                    return;
                case Icon.PartlyCloudyNight:
                    serializer.Serialize( writer, "partly-cloudy-night" );
                    return;
            }
            throw new Exception( "Cannot marshal type Icon" );
        }

        public static readonly IconConverter Singleton = new IconConverter();
    }

    internal class PrecipTypeConverter : JsonConverter
    {
        public override bool CanConvert( Type t ) => t == typeof( PrecipType ) || t == typeof( PrecipType? );

        public override object ReadJson( JsonReader reader, Type t, object existingValue, JsonSerializer serializer )
        {
            if ( reader.TokenType == JsonToken.Null ) return null;
            var value = serializer.Deserialize<string>( reader );

            switch ( value )
            {
                case "rain":
                    return PrecipType.Rain;
                case "snow":
                    return PrecipType.Snow;
                case "sleet":
                    return PrecipType.Sleet;
                case "none":
                    return PrecipType.None;
            }
            throw new Exception( "Cannot unmarshal type PrecipType" );
        }

        public override void WriteJson( JsonWriter writer, object untypedValue, JsonSerializer serializer )
        {
            if ( untypedValue == null )
            {
                serializer.Serialize( writer, null );
                return;
            }
            var value = (PrecipType)untypedValue;
            switch ( value )
            {
                case PrecipType.Rain:
                    serializer.Serialize( writer, "rain" );
                    break;
                case PrecipType.Snow:
                    serializer.Serialize( writer, "snow" );
                    break;
                case PrecipType.Sleet:
                    serializer.Serialize( writer, "sleet" );
                    break;
                case PrecipType.None:
                    serializer.Serialize( writer, "none" );
                    break;
                default:
                    break;
            }
            throw new Exception( "Cannot marshal type PrecipType" );
        }

        public static readonly PrecipTypeConverter Singleton = new PrecipTypeConverter();
    }

    //internal class SummaryConverter : JsonConverter
    //{
    //    public override bool CanConvert( Type t ) => t == typeof( Summary ) || t == typeof( Summary? );

    //    public override object ReadJson( JsonReader reader, Type t, object existingValue, JsonSerializer serializer )
    //    {
    //        if ( reader.TokenType == JsonToken.Null ) return null;
    //        var value = serializer.Deserialize<string>( reader );
    //        switch ( value )
    //        {
    //            case "Clear":
    //                return Summary.Clear;
    //            case "Cloudy":
    //                return Summary.Cloudy;
    //            case "Partly Cloudy":
    //                return Summary.PartlyCloudy;
    //        }
    //        throw new Exception( "Cannot unmarshal type Summary" );
    //    }

    //    public override void WriteJson( JsonWriter writer, object untypedValue, JsonSerializer serializer )
    //    {
    //        if ( untypedValue == null )
    //        {
    //            serializer.Serialize( writer, null );
    //            return;
    //        }
    //        var value = (Summary)untypedValue;
    //        switch ( value )
    //        {
    //            case Summary.Clear:
    //                serializer.Serialize( writer, "Clear" );
    //                return;
    //            case Summary.Cloudy:
    //                serializer.Serialize( writer, "Cloudy" );
    //                return;
    //            case Summary.PartlyCloudy:
    //                serializer.Serialize( writer, "Partly Cloudy" );
    //                return;
    //        }
    //        throw new Exception( "Cannot marshal type Summary" );
    //    }

    //    public static readonly SummaryConverter Singleton = new SummaryConverter();
    //}
}
